class Solution {
    static int minJumps(int[] arr) {
        int size = arr.length;

        if (size <= 1) return 0; // No jumps needed if there's only one element
        if (arr[0] == 0) return -1; // Can't move anywhere if the first element is 0

        int jumps = 0;
        int fasttrack = 0;
        int current_end = 0;

        for (int i = 0; i < size - 1; i++) {
            // Update the farthest point reachable
            fasttrack = Math.max(fasttrack, i + arr[i]);

            // If we've reached the end of the current jump range
            if (i == current_end) {
                jumps++; // Increment jump count
                current_end = fasttrack; // Update the range to the farthest point

                // If the current range covers or exceeds the last index
                if (current_end >= size - 1) return jumps;
            }
        }

        // If we exit the loop without reaching the last index
        return -1;
    }

    public static void main(String[] args) {
        int[] arr = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9};
        System.out.println(minJumps(arr)); // Output: 3
    }
}
